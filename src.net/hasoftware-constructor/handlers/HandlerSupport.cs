using System;
using System.IO;
using hasoftware.model;

namespace hasoftware.handlers
{
    public class HandlerSupport
    {
        public static Specification Specification;
        public static string FileLocation = ".";

        public static StreamWriter OpenNetFilename(string basename, string extension)
        {
            // TODO create directories if required
            var sw = File.CreateText(NetBaseDirectory + Path.DirectorySeparatorChar + basename + extension);
            Header(sw);
            return sw;
        }

        public static StreamWriter OpenNetFilename(string subDirectory, string basename, string extension)
        {
            // TODO create directories if required
            var sw = File.CreateText(NetBaseDirectory + Path.DirectorySeparatorChar + subDirectory + Path.DirectorySeparatorChar + basename + extension);
            Header(sw);
            return sw;
        }

        public static StreamWriter OpenCppFilename(string basename, string extension)
        {
            // TODO create directories if required
            var sw = File.CreateText(CppBaseDirectory + Path.DirectorySeparatorChar + basename + extension);
            Header(sw);
            return sw;
        }

        public static StreamWriter OpenCppFilename(string subDirectory, string basename, string extension)
        {
            // TODO create directories if required
            var sw = File.CreateText(CppBaseDirectory + Path.DirectorySeparatorChar + subDirectory + Path.DirectorySeparatorChar + basename + extension);
            Header(sw);
            return sw;
        }

        public static StreamWriter OpenJavaFilename(string basename, string extension)
        {
            // TODO create directories if required
            var sw = File.CreateText(JavaBaseDirectory + Path.DirectorySeparatorChar + basename + extension);
            Header(sw);
            return sw;
        }

        public static StreamWriter OpenJavaFilename(string subDirectory, string basename, string extension)
        {
            // TODO create directories if required
            var sw = File.CreateText(JavaBaseDirectory + Path.DirectorySeparatorChar + subDirectory + Path.DirectorySeparatorChar + basename + extension);
            Header(sw);
            return sw;
        }

        private static void Header(StreamWriter sw)
        {
            sw.WriteLine("//");
            sw.WriteLine("// DO NOT EDIT THIS FILE - CONSTRUCTED ON {0}", DateTime.Now);
            sw.WriteLine("//");
            sw.WriteLine("");
        }

        private static string NetBaseDirectory
        {
            get
            {
                var bd = Specification.NetBaseDirectory;
                bd = bd.Replace("${file-location}", FileLocation);
                return bd;
            }
        }

        private static string JavaBaseDirectory
        {
            get
            {
                var bd = Specification.JavaBaseDirectory;
                bd = bd.Replace("${file-location}", FileLocation);
                return bd;
            }
        }

        private static string CppBaseDirectory
        {
            get
            {
                var bd = Specification.CppBaseDirectory;
                bd = bd.Replace("${file-location}", FileLocation);
                return bd;
            }
        }
    }
}
