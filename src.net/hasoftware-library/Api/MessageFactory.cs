//
// DO NOT EDIT THIS FILE - CONSTRUCTED ON 28/04/2014 1:27:52 AM
//

using hasoftware.Cdef;
using hasoftware.Messages;

namespace hasoftware.Api {
   public class MessageFactory {
      public static Message Decode(CdefMessage cdefMessage) {
         Message message = null;
         int functionCode = cdefMessage.GetInt(0);
         int transactionNumber = cdefMessage.GetInt();
         int systemFlags = cdefMessage.GetInt();
         if (systemFlags == (CdefSystemFlags.Error | CdefSystemFlags.Response)) {
            message = new ErrorResponse(cdefMessage);
         } else {
            bool isRequest = ((systemFlags & CdefSystemFlags.Response) == 0);
            switch (functionCode) {
               case FunctionCode.Error:
                  if (!isRequest) message = new ErrorResponse(cdefMessage);
                  break;
               case FunctionCode.Heartbeat:
                  if (isRequest) message = new HeartbeatRequest(cdefMessage);
                  if (!isRequest) message = new HeartbeatResponse(cdefMessage);
                  break;
               case FunctionCode.Notify:
                  if (isRequest) message = new NotifyRequest(cdefMessage);
                  if (!isRequest) message = new NotifyResponse(cdefMessage);
                  break;
               case FunctionCode.InputMessage:
                  if (isRequest) message = new InputMessageRequest(cdefMessage);
                  if (!isRequest) message = new InputMessageResponse(cdefMessage);
                  break;
               case FunctionCode.OutputMessage:
                  if (isRequest) message = new OutputMessageRequest(cdefMessage);
                  if (!isRequest) message = new OutputMessageResponse(cdefMessage);
                  break;
               case FunctionCode.Login:
                  if (isRequest) message = new LoginRequest(cdefMessage);
                  if (!isRequest) message = new LoginResponse(cdefMessage);
                  break;
               case FunctionCode.OutputDevice:
                  if (isRequest) message = new OutputDeviceRequest(cdefMessage);
                  if (!isRequest) message = new OutputDeviceResponse(cdefMessage);
                  break;
               case FunctionCode.Location:
                  if (isRequest) message = new LocationRequest(cdefMessage);
                  if (!isRequest) message = new LocationResponse(cdefMessage);
                  break;
               case FunctionCode.Point:
                  if (isRequest) message = new PointRequest(cdefMessage);
                  if (!isRequest) message = new PointResponse(cdefMessage);
                  break;
               case FunctionCode.CurrentEvent:
                  if (isRequest) message = new CurrentEventRequest(cdefMessage);
                  if (!isRequest) message = new CurrentEventResponse(cdefMessage);
                  break;
            }
         }
         return message;
      }
   }
}
