//
// DO NOT EDIT THIS FILE - CONSTRUCTED ON 28/04/2014 1:27:52 AM
//

package hasoftware.api;

import hasoftware.api.messages.ErrorResponse;
import hasoftware.api.messages.HeartbeatRequest;
import hasoftware.api.messages.HeartbeatResponse;
import hasoftware.api.messages.NotifyRequest;
import hasoftware.api.messages.NotifyResponse;
import hasoftware.api.messages.InputMessageRequest;
import hasoftware.api.messages.InputMessageResponse;
import hasoftware.api.messages.OutputMessageRequest;
import hasoftware.api.messages.OutputMessageResponse;
import hasoftware.api.messages.LoginRequest;
import hasoftware.api.messages.LoginResponse;
import hasoftware.api.messages.OutputDeviceRequest;
import hasoftware.api.messages.OutputDeviceResponse;
import hasoftware.api.messages.LocationRequest;
import hasoftware.api.messages.LocationResponse;
import hasoftware.api.messages.PointRequest;
import hasoftware.api.messages.PointResponse;
import hasoftware.api.messages.CurrentEventRequest;
import hasoftware.api.messages.CurrentEventResponse;
import hasoftware.cdef.CDEFMessage;
import hasoftware.cdef.CDEFSystemFlags;

public class CDEFMessageFactory {
   public static Message decode(CDEFMessage cdefMessage) {
      Message message = null;
      int functionCode = cdefMessage.getInt(0);
      int transactionNumber = cdefMessage.getInt();
      int systemFlags = cdefMessage.getInt();
      if (systemFlags == (CDEFSystemFlags.Error | CDEFSystemFlags.Response)) {
         message = new ErrorResponse(cdefMessage);
      } else {
         boolean isRequest = ((systemFlags & CDEFSystemFlags.Response) == 0);
         switch (functionCode) {
            case FunctionCode.Error:
               if (!isRequest) message = new ErrorResponse(cdefMessage);
               break;
            case FunctionCode.Heartbeat:
               if (isRequest) message = new HeartbeatRequest(cdefMessage);
               if (!isRequest) message = new HeartbeatResponse(cdefMessage);
               break;
            case FunctionCode.Notify:
               if (isRequest) message = new NotifyRequest(cdefMessage);
               if (!isRequest) message = new NotifyResponse(cdefMessage);
               break;
            case FunctionCode.InputMessage:
               if (isRequest) message = new InputMessageRequest(cdefMessage);
               if (!isRequest) message = new InputMessageResponse(cdefMessage);
               break;
            case FunctionCode.OutputMessage:
               if (isRequest) message = new OutputMessageRequest(cdefMessage);
               if (!isRequest) message = new OutputMessageResponse(cdefMessage);
               break;
            case FunctionCode.Login:
               if (isRequest) message = new LoginRequest(cdefMessage);
               if (!isRequest) message = new LoginResponse(cdefMessage);
               break;
            case FunctionCode.OutputDevice:
               if (isRequest) message = new OutputDeviceRequest(cdefMessage);
               if (!isRequest) message = new OutputDeviceResponse(cdefMessage);
               break;
            case FunctionCode.Location:
               if (isRequest) message = new LocationRequest(cdefMessage);
               if (!isRequest) message = new LocationResponse(cdefMessage);
               break;
            case FunctionCode.Point:
               if (isRequest) message = new PointRequest(cdefMessage);
               if (!isRequest) message = new PointResponse(cdefMessage);
               break;
            case FunctionCode.CurrentEvent:
               if (isRequest) message = new CurrentEventRequest(cdefMessage);
               if (!isRequest) message = new CurrentEventResponse(cdefMessage);
               break;
         }
      }
      return message;
   }
}
