//
// DO NOT EDIT THIS FILE - CONSTRUCTED ON 11/04/2015 3:01:58 PM
//

#ifndef MESSAGES_H
#define MESSAGES_H

#include <list>
#include <string>
#include <vector>

#include "CdefMessage.h"
#include "Classes.h"

namespace hasoftware {

   class InputMessageRequest : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<int> _ids;
      std::list<InputMessage*> _inputMessages;
   public:
      InputMessageRequest() : HASoftware::MessageBase() {
      }

      InputMessageRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _ids.push_back(cdefMessage.GetInt());
               count--;
            }
         }
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _inputMessages.push_back(new InputMessage(cdefMessage));
               count--;
            }
         }
      }

      virtual ~InputMessageRequest() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<int>& GetIds() { return _ids; }

      std::list<InputMessage*>& GetInputMessages() { return _inputMessages; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_ids.size());
         for (std::list<int>::iterator it=_ids.begin(); it!=_ids.end(); ++it) {
            cdefMessage.PutInt(*it);
         }
         cdefMessage.PutInt(_inputMessages.size());
         for (std::list<InputMessage*>::iterator it=_inputMessages.begin(); it!=_inputMessages.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class InputMessageResponse : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<InputMessage*> _inputMessages;
   public:
      InputMessageResponse() : HASoftware::MessageBase() {
      }

      InputMessageResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _inputMessages.push_back(new InputMessage(cdefMessage));
               count--;
            }
         }
      }

      virtual ~InputMessageResponse() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<InputMessage*>& GetInputMessages() { return _inputMessages; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_inputMessages.size());
         for (std::list<InputMessage*>::iterator it=_inputMessages.begin(); it!=_inputMessages.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class OutputMessageRequest : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<int> _ids;
      std::list<OutputMessage*> _outputMessages;
   public:
      OutputMessageRequest() : HASoftware::MessageBase() {
      }

      OutputMessageRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _ids.push_back(cdefMessage.GetInt());
               count--;
            }
         }
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _outputMessages.push_back(new OutputMessage(cdefMessage));
               count--;
            }
         }
      }

      virtual ~OutputMessageRequest() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<int>& GetIds() { return _ids; }

      std::list<OutputMessage*>& GetOutputMessages() { return _outputMessages; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_ids.size());
         for (std::list<int>::iterator it=_ids.begin(); it!=_ids.end(); ++it) {
            cdefMessage.PutInt(*it);
         }
         cdefMessage.PutInt(_outputMessages.size());
         for (std::list<OutputMessage*>::iterator it=_outputMessages.begin(); it!=_outputMessages.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class OutputMessageResponse : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<OutputMessage*> _outputMessages;
   public:
      OutputMessageResponse() : HASoftware::MessageBase() {
      }

      OutputMessageResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _outputMessages.push_back(new OutputMessage(cdefMessage));
               count--;
            }
         }
      }

      virtual ~OutputMessageResponse() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<OutputMessage*>& GetOutputMessages() { return _outputMessages; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_outputMessages.size());
         for (std::list<OutputMessage*>::iterator it=_outputMessages.begin(); it!=_outputMessages.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class LoginRequest : public HASoftware::MessageBase {
   private:
      std::string _username;
      std::string _password;
   public:
      LoginRequest() : HASoftware::MessageBase() {
      }

      LoginRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _username = cdefMessage.GetString();
         _password = cdefMessage.GetString();
      }

      virtual ~LoginRequest() {
      }

      std::string GetUsername() { return _username; }
      void SetUsername(std::string username) { _username = username; }

      std::string GetPassword() { return _password; }
      void SetPassword(std::string password) { _password = password; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutString(_username);
         cdefMessage.PutString(_password);
      }

   };

   class LoginResponse : public HASoftware::MessageBase {
   private:
   public:
      LoginResponse() : HASoftware::MessageBase() {
      }

      LoginResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
      }

      virtual ~LoginResponse() {
      }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
      }

   };

   class OutputDeviceRequest : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<int> _ids;
      std::list<OutputDevice*> _outputDevices;
   public:
      OutputDeviceRequest() : HASoftware::MessageBase() {
      }

      OutputDeviceRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _ids.push_back(cdefMessage.GetInt());
               count--;
            }
         }
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _outputDevices.push_back(new OutputDevice(cdefMessage));
               count--;
            }
         }
      }

      virtual ~OutputDeviceRequest() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<int>& GetIds() { return _ids; }

      std::list<OutputDevice*>& GetOutputDevices() { return _outputDevices; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_ids.size());
         for (std::list<int>::iterator it=_ids.begin(); it!=_ids.end(); ++it) {
            cdefMessage.PutInt(*it);
         }
         cdefMessage.PutInt(_outputDevices.size());
         for (std::list<OutputDevice*>::iterator it=_outputDevices.begin(); it!=_outputDevices.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class OutputDeviceResponse : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<OutputDevice*> _outputDevices;
   public:
      OutputDeviceResponse() : HASoftware::MessageBase() {
      }

      OutputDeviceResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _outputDevices.push_back(new OutputDevice(cdefMessage));
               count--;
            }
         }
      }

      virtual ~OutputDeviceResponse() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<OutputDevice*>& GetOutputDevices() { return _outputDevices; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_outputDevices.size());
         for (std::list<OutputDevice*>::iterator it=_outputDevices.begin(); it!=_outputDevices.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class LocationRequest : public HASoftware::MessageBase {
   private:
      int _action;
      int _parentId;
   public:
      LocationRequest() : HASoftware::MessageBase() {
      }

      LocationRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         _parentId = cdefMessage.GetInt();
      }

      virtual ~LocationRequest() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      int GetParentId() { return _parentId; }
      void SetParentId(int parentId) { _parentId = parentId; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_parentId);
      }

   };

   class LocationResponse : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<Location*> _locations;
   public:
      LocationResponse() : HASoftware::MessageBase() {
      }

      LocationResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _locations.push_back(new Location(cdefMessage));
               count--;
            }
         }
      }

      virtual ~LocationResponse() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<Location*>& GetLocations() { return _locations; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_locations.size());
         for (std::list<Location*>::iterator it=_locations.begin(); it!=_locations.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class PointRequest : public HASoftware::MessageBase {
   private:
      int _action;
      int _nodeId;
      std::string _address;
   public:
      PointRequest() : HASoftware::MessageBase() {
      }

      PointRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         _nodeId = cdefMessage.GetInt();
         _address = cdefMessage.GetString();
      }

      virtual ~PointRequest() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      int GetNodeId() { return _nodeId; }
      void SetNodeId(int nodeId) { _nodeId = nodeId; }

      std::string GetAddress() { return _address; }
      void SetAddress(std::string address) { _address = address; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_nodeId);
         cdefMessage.PutString(_address);
      }

   };

   class PointResponse : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<Point*> _points;
   public:
      PointResponse() : HASoftware::MessageBase() {
      }

      PointResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _points.push_back(new Point(cdefMessage));
               count--;
            }
         }
      }

      virtual ~PointResponse() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<Point*>& GetPoints() { return _points; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_points.size());
         for (std::list<Point*>::iterator it=_points.begin(); it!=_points.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class CurrentEventRequest : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<int> _ids;
      std::list<CurrentEvent*> _currentEvents;
   public:
      CurrentEventRequest() : HASoftware::MessageBase() {
      }

      CurrentEventRequest(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _ids.push_back(cdefMessage.GetInt());
               count--;
            }
         }
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _currentEvents.push_back(new CurrentEvent(cdefMessage));
               count--;
            }
         }
      }

      virtual ~CurrentEventRequest() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<int>& GetIds() { return _ids; }

      std::list<CurrentEvent*>& GetCurrentEvents() { return _currentEvents; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_ids.size());
         for (std::list<int>::iterator it=_ids.begin(); it!=_ids.end(); ++it) {
            cdefMessage.PutInt(*it);
         }
         cdefMessage.PutInt(_currentEvents.size());
         for (std::list<CurrentEvent*>::iterator it=_currentEvents.begin(); it!=_currentEvents.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

   class CurrentEventResponse : public HASoftware::MessageBase {
   private:
      int _action;
      std::list<CurrentEvent*> _currentEvents;
   public:
      CurrentEventResponse() : HASoftware::MessageBase() {
      }

      CurrentEventResponse(HASoftware::CdefMessage &cdefMessage) : HASoftware::MessageBase(cdefMessage) {
         _action = cdefMessage.GetInt();
         {
            int count = cdefMessage.GetInt();
            while (count > 0) {
               _currentEvents.push_back(new CurrentEvent(cdefMessage));
               count--;
            }
         }
      }

      virtual ~CurrentEventResponse() {
      }

      int GetAction() { return _action; }
      void SetAction(int action) { _action = action; }

      std::list<CurrentEvent*>& GetCurrentEvents() { return _currentEvents; }

      virtual void Encode(HASoftware::CdefMessage &cdefMessage) {
         HASoftware::MessageBase::Encode(cdefMessage);
         cdefMessage.PutInt(_action);
         cdefMessage.PutInt(_currentEvents.size());
         for (std::list<CurrentEvent*>::iterator it=_currentEvents.begin(); it!=_currentEvents.end(); ++it) {
            (*it)->Encode(cdefMessage);
         }
      }

   };

}

#endif
